---
title: "Generalized Quarto Template"
author: 
  - name: "Sam Schiano"
    orcid: 0009-0003-3744-6428
    email: "samantha.schiano@noaa.gov"
    affiliations:
      - name: "NOAA Fisheries OST"
        address: "1315 East-West Highway"
        city: "Silver Spring"
        state: "MD"
        postal-code: "20910"
  - name: "John Doe"
    orcid: 0009-0003-3744-6429
    email: johndoe@noaa.gov
date: today
format: 
  html:
    keep-md: true
    embed-resources: true
  pdf:
    keep-md: true
    embed-resources: true
    toc: true
fig-width: 8
fig-height: 5
params:
  fsc: "SE"
  region: "SATL"
  species_init: "RS"
---

```{r}
#| label: libraries

library(here)
```

## YAML

The area at the top is the YAML command area which dictates some portions of the document. Additional and in-depth details for this portion can also be found at https://quarto.org/docs/reference/formats/opml.html#format-options

The list of commands include

-   title

-   author (name and information)

    -   name
    -   orcid

-   date

    -   today, now, last-modified
    -   or dates in these orders
        -   MM/dd/yyyy
        -   MM-dd-yyyy
        -   MM/dd/yy
        -   MM-dd-yy
        -   yyyy-MM-dd
        -   dd MM yyyy
        -   MM dd, yyyy
        -   YYYY-MM-DDTHH:mm:ssZ

-   format (or multiple formats)

    format:

    html: default

    pdf: default

    docx

-   toc: table of contents

-   code-fold: (true/false) - in an HTML format, the code is hidden in a drop down tab for the use to view or not view

-   toc-depth: specify the number of section levels to include in the table of contents

-   number-sections

You can set all R code chunk options here:

execute:

| Execute options | Actions              |
|-----------------|----------------------|
| echo            | true, false          |
| warning         | true, false          |
| eval            | true, false, \[...\] |
| output          | true, false, asis    |
| warning         | true, false          |
| error           | true, false          |
| include         | true, false          |
| cache           | true, false, refresh |
| freeze          | true, false, auto    |

: These options are listed after the execute: command with a tab inset followed by the option with a colon, space and the action.

## Template

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

This template consists of generalized code that could be used as a reference when creating a new quarto document. Tips and tricks that were learned along the way have been included in the respective section. A lot of Rmarkdown notation can be utilized into quarto with previous Rmarkdown documents still able to be rendered when converted to a .qmd (to my knowledge).

## Formatting

### Headings and Page Breaks

Headings can be noted by using a specified number of #. A single \# indicates the *Header 1*, two \# indicates *Header 2*, three \# indicates *Header 3*, and so on.

Page breaks can be added manually into the text when editing the document in the source editor (not visual). The notation is `<br` which will create a manual page break between r objects.

### Font Changes

-   *Italic* is indicated through a word or set of words encased in \*

    `*word*`

-   **Bold** is indicated through a word or set of words encased by a set of double \*

    `**word**`

### Equations

Sample equation (inline): $R_{y}=\frac{\alpha*SSB_{y}}{1+\beta*SSB_{y}}$ Code: `$R_{y}=\frac{\alpha*SSB_{y}}{1+\beta*SSB_{y}}$`

Sample equation (own line): <br> $$
R_{y}=\frac{\alpha*SSB_{y}}{1+\beta*SSB_{y}}
$$ <br>

Greek letters notations:

Generalized notation - `$\alpha$`

| Greek Letter Spelling | Lowercase  | Capital    |
|-----------------------|------------|------------|
| alpha                 | $\alpha$   | A          |
| beta                  | $\beta$    | B          |
| gamma                 | $\gamma$   | $\Gamma$   |
| delta                 | $\delta$   | $\Delta$   |
| epsilon               | $\epsilon$ | E          |
| zeta                  | $\zeta$    | Z          |
| eta                   | $\eta$     | H          |
| theta                 | $\theta$   | $\Theta$   |
| kappa                 | $\kappa$   | K          |
| lambda                | $\lambda$  | $\Lambda$  |
| mu                    | $\mu$      | M          |
| nu                    | $\nu$      | N          |
| omicron               | $\omicron$ | O          |
| rho                   | $\rho$     | P          |
| sigma                 | $\sigma$   | $\Sigma$   |
| tau                   | $\tau$     | T          |
| upsilon               | $\upsilon$ | $\Upsilon$ |
| chi                   | $\chi$     | X          |
| psi                   | $\psi$     | $\Psi$     |
| iota                  | $\iota$    | I          |
| xi                    | $\xi$      | $\Xi$      |
| pi                    | $\pi$      | $\Pi$      |
| phi                   | $\phi$     | $\Phi$     |
| omega                 | $\omega$   | $\Omega$   |

### Other Helpful Functions for Equations

| Component   | Notation              | Output              |
|-------------|-----------------------|---------------------|
| Subscript   | `$*symbol*\_{sub}$`   | $symbol_{sub}$      |
| Superscript | `$*symbol*\^{sup}$`   | $symbol^{sup}$      |
| Fractions   | `$\frac{num}{denom}$` | $\frac{num}{denom}$ |
| Roots       | `$\sqrt{num}$`        | $\sqrt{num}$        |

For in-line text, superscript and subscript notation is different.

-   Superscript^2^ - `superscript^2^`

-   Subscript~2~ - `subscript~2~`

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r test-chunk1}
#| echo: true

x = 1 + 1
print(x)
```

You can add options to executable code to remove the code chunk in the rendered document like this

```{r test-chunk2}
#| echo: false

y = 2 * 2
print(y)
```

The `echo: false` option disables the printing of code (only output is displayed).

Other options include:

| Option  | Description                                                |
|---------|------------------------------------------------------------|
| eval    | Evaluate the code chunk                                    |
| output  | Include the source code in output                          |
| warning | Include warnings in the output                             |
| error   | Include errors in the output                               |
| include | Catch all for preventing any output code (code or results) |

### Figures

Inline references to figures can be generate by using the \@. If one referenced a figure in the test, you would need to label the figure in the R code chunk (@fig-test1).

```{r test-fig}
#| label: fig-test1
#| fig-cap: "Test figure caption and example to add in."
#| fig-cap-location: bottom
#| echo: false
#| warning: false

library(ggplot2)

ggplot(aes(x=speed, y=dist), data = cars)+
  geom_point()+
  labs(
    x="Speed",
    y="Distance"
    )+
  theme_classic()
```

### Tables

Adding flextable objects into the document.

```{r test-tab1}
#| label: tab-test1
#| tbl-cap: "Test1 table caption and example to add in."
#| echo: false
#| warning: false

flextable::flextable(data.frame(x=seq(1,4),y=as.character(seq(2021,2024))))
```

<br>

```{r test-tab2}
#| label: tab-test2
#| tbl-cap: "Test2 table caption to add in break."
#| echo: false
#| warning: false

flextable::flextable(data.frame(x=seq(5,8),y=as.character(seq(2021,2024))))
```

## Modular Workflow

Quarto and Rmarkdown also allow the user to develop a template from a set of .qmd or .rmd documents from calling them in R chunks.

### Child Documents

One can combine a series of qmd files when the report is very long and would be easier to work with in sections rather than a single full report. In order to add one to the template document, the user would need to add it as an R chunk that includes an option of child = "child_file.qmd". Child files will be added as a new section into the template.

```{r child = "child_test1.qmd"}

```

Alternatively, you can conditionally load a child document using the following syntax:

```{r, results='asis'}
#| label: cond_child
#| eval: true

if(params$region=="SATL"){
  a <- knitr::knit_child("cond_child1.qmd", quiet = TRUE)
  cat(a, sep='\n')
}
```

If the user just wants the output of the R code from the child, the user would set an additional option of eval = T.

Testing the visual editor when adding citations [@base].

## References
